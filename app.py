# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AKbKQf6cL6WDh1qNb2cIvURCnZ4Uk6L-
"""

import streamlit as st
import pandas as pd
import altair as alt

# Load and clean data
file_id = '1C2dq7vFPWD37RSHDK2r3qBmaeCeKrNLZ'  # Replace with your actual file ID
url = f'https://drive.google.com/uc?id={file_id}'
df = pd.read_csv(url)

df = df[[
    'name', 'neighbourhood_cleansed', 'room_type', 'price', 'number_of_reviews',
    'review_scores_rating', 'minimum_nights', 'availability_365', 'accommodates'
]].copy()

df['price'] = df['price'].replace('[\$,]', '', regex=True).astype(float)
df = df.dropna(subset=['price', 'review_scores_rating', 'room_type', 'neighbourhood_cleansed'])
df = df[df['price'] > 0]

# Sidebar filters
st.sidebar.header("Filters")
neighborhoods = ['All'] + sorted(df['neighbourhood_cleansed'].unique())
neighborhood = st.sidebar.selectbox("Neighborhood", neighborhoods)
room_types = st.sidebar.multiselect("Room Type(s)", options=df['room_type'].unique(), default=list(df['room_type'].unique()))
price_range = st.sidebar.slider("Price Range (¥)", int(df['price'].min()), int(df['price'].max()), (5000, 100000))
score_range = st.sidebar.slider("Review Score Range", 1.0, 5.0, (3.0, 5.0), step=0.1)

# Apply filters
df_filtered = df[
    (df['room_type'].isin(room_types)) &
    (df['price'] >= price_range[0]) & (df['price'] <= price_range[1]) &
    (df['review_scores_rating'] >= score_range[0]) & (df['review_scores_rating'] <= score_range[1])
]
if neighborhood != 'All':
    df_filtered = df_filtered[df_filtered['neighbourhood_cleansed'] == neighborhood]

# Title
st.title("Tokyo Airbnb Dashboard (Creative Edition)")
st.write("Explore Tokyo Airbnb listings with enhanced visuals and filters.")
st.write(f"🔍 **Filtered Listings:** {len(df_filtered)}")

if df_filtered.empty:
    st.warning("⚠️ No listings match your current filter settings. Try broadening your selection.")
else:
    # BOX PLOT: Price distribution by room type (horizontal)
    boxplot = alt.Chart(df_filtered).mark_boxplot(extent='min-max').encode(
        y=alt.Y('room_type:N', title='Room Type'),
        x=alt.X('price:Q', title='Price (¥)', scale=alt.Scale(domain=[0, df_filtered['price'].quantile(0.95)])),
        color='room_type:N'
    ).properties(
        width=700,
        height=300,
        title="Price Distribution by Room Type (Boxplot)"
    )

    # Only show boxplot if enough data
    if df_filtered['room_type'].nunique() < 1 or df_filtered.groupby('room_type').size().min() < 2:
        st.warning("⚠️ Not enough data to render the boxplot with current filters.")
    else:
        st.altair_chart(boxplot, use_container_width=True)

    # BAR CHART: Avg review score by neighborhood
    bar_height = 25
    num_neighborhoods = df_filtered['neighbourhood_cleansed'].nunique()

    review_bar = alt.Chart(df_filtered).mark_bar().encode(
        x=alt.X('mean(review_scores_rating):Q', title='Avg. Review Score'),
        y=alt.Y('neighbourhood_cleansed:N', sort='-x', title='Neighborhood'),
        color=alt.Color('neighbourhood_cleansed:N', legend=None),
        tooltip=['neighbourhood_cleansed:N', 'mean(review_scores_rating):Q']
    ).properties(
        width=700,
        height=max(300, num_neighborhoods * bar_height),
        title='Average Review Score by Neighborhood'
    )
    st.altair_chart(review_bar, use_container_width=True)

    # SCATTERPLOT: Price vs. Review Score
    scatter = alt.Chart(df_filtered).mark_circle(size=60).encode(
        x=alt.X('review_scores_rating:Q', title='Review Score'),
        y=alt.Y('price:Q', title='Price (¥)'),
        color='room_type:N',
        tooltip=['name:N', 'price:Q', 'review_scores_rating:Q', 'room_type:N']
    ).interactive().properties(
        width=700,
        height=300,
        title="Price vs. Review Score"
    )
    st.altair_chart(scatter, use_container_width=True)